# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'statusbar.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import argparse
import logging
import sys
import time
from tf_pose import common
import cv2
import numpy as np
from tf_pose.estimator import TfPoseEstimator
from tf_pose.networks import get_graph_path, model_wh
from tf_pose.groups import Bicep,Shoulder,Tricep

#logger details
logger = logging.getLogger('TfPoseEstimatorRun')
logger.handlers.clear()
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
formatter = logging.Formatter('[%(asctime)s] [%(name)s] [%(levelname)s] %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)

image=None

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(404, 293)
        self.gridLayoutWidget = QtWidgets.QWidget(Form)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(0, 0, 401, 291))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(self.gridLayoutWidget)
        self.frame.setStyleSheet("background-color: rgb(133, 255, 231);\n"
"font-size:13px;")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        # self.jointNumber = QtWidgets.QLabel(self.frame)
        # self.jointNumber.setGeometry(QtCore.QRect(50, 60, 47, 13))
        # self.jointNumber.setObjectName("jointNumber")
        # self.jointValue = QtWidgets.QLabel(self.frame)
        # self.jointValue.setGeometry(QtCore.QRect(120, 60, 47, 13))
        # self.jointValue.setObjectName("jointValue")
        self.status = QtWidgets.QLabel(self.frame)
        self.status.setGeometry(QtCore.QRect(0, 250, 391, 31))
        self.status.setStyleSheet("margin-left:10px;\n"
"padding:10px;")
        self.status.setObjectName("status")
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        # self.jointNumber.setText(_translate("Form", "Joint(1):"))
        # self.jointValue.setText(_translate("Form", "value"))
        self.status.setText(_translate("Form", "status"))
        self.call_pose_estimation()

    def call_pose_estimation(self):
        parser = argparse.ArgumentParser(description='tf-pose-estimation run')
        parser.add_argument('--image', type=str, default='./images/p1.jpg')
        parser.add_argument('--model', type=str, default='cmu',
                            help='cmu / mobilenet_thin / mobilenet_v2_large / mobilenet_v2_small')
        parser.add_argument('--resize', type=str, default='0x0',
                            help='if provided, resize images before they are processed. '
                                'default=0x0, Recommends : 432x368 or 656x368 or 1312x736 ')
        parser.add_argument('--resize-out-ratio', type=float, default=4.0,
                            help='if provided, resize heatmaps before they are post-processed. default=1.0')

        parser.add_argument('--exercise', type=str, default='bicep',
                            help='choose the exercise')


        args = parser.parse_args()

        w, h = model_wh(args.resize)
        if w == 0 or h == 0:
            e = TfPoseEstimator(get_graph_path(args.model), target_size=(432, 368))
        else:
            e = TfPoseEstimator(get_graph_path(args.model), target_size=(w, h))

        # estimate human poses from a single image !
        image = common.read_imgfile(args.image, None, None)
        if image is None:
            logger.error('Image can not be read, path=%s' % args.image)
            sys.exit(-1)

        t = time.time()
        humans = e.inference(image, resize_to_default=(w > 0 and h > 0), upsample_size=args.resize_out_ratio)
        elapsed = time.time() - t

        logger.info('inference image: %s in %.4f seconds.' % (args.image, elapsed))

        image ,joints = TfPoseEstimator.draw_humans( args.exercise,image, humans, imgcopy=False)
        # print(joints)
        self.d={}
        body=None
        inc=0
        status=""

        #get exercise limits
        if(args.exercise == 'bicep'):
            body=Bicep()
        
        elif(args.exercise=="shoulder"):
            body=Shoulder()

        elif(args.exercise=="tricep"):
            body=Tricep()

      
        for index,joint in enumerate(joints):
            ang_start,ang_stop=body.get_limit(joint)
            self.d["jointNumber"+str(index+1)] = QtWidgets.QLabel(self.frame)
            self.d["jointNumber"+str(index+1)].setGeometry(QtCore.QRect(50, 60+inc, 100, 13))
            self.d["jointNumber"+str(index+1)].setObjectName("jointNumber"+str(index+1))
            self.d["jointNumber"+str(index+1)].setText("Joint("+str(joint)+")"+":"+str(joints[joint]))
            inc+=20

            if(joints[joint] not in range(ang_start,ang_stop+1)):
                if(joints[joint]>ang_stop):
                    amount="expansion"
                else:
                    amount="contraction"

                status+=f"Too much {amount} of Joint({joint})\n"
            
            self.status.setText(status)
            self.status.setStyleSheet("color:red")
            
        try:
            import matplotlib
            import matplotlib.pyplot as plt
            matplotlib.use('GTK3Agg')
            fig = plt.figure()
            a = fig.add_subplot(2, 2, 1)
            a.set_title('Result')
            plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))

            bgimg = cv2.cvtColor(image.astype(np.uint8), cv2.COLOR_BGR2RGB)
            bgimg = cv2.resize(bgimg, (e.heatMat.shape[1], e.heatMat.shape[0]), interpolation=cv2.INTER_AREA)

        except Exception as e:
            logger.warning('matplitlib error, %s' % e)
            cv2.imshow('result', image)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(cv2.waitKey())

    





    

