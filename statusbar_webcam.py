# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'statusbar.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import argparse
import logging
import time
import cv2
import numpy as np
from tf_pose.estimator import TfPoseEstimator
from tf_pose.networks import get_graph_path, model_wh
from tf_pose.groups import Bicep,Shoulder,Tricep
from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QThread

logger = logging.getLogger('TfPoseEstimator-WebCam')
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
formatter = logging.Formatter('[%(asctime)s] [%(name)s] [%(levelname)s] %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)

fps_time = 0

def str2bool(v):
    return v.lower() in ("yes", "true", "t", "1")

parser = argparse.ArgumentParser(description='tf-pose-estimation realtime webcam')
parser.add_argument('--camera', type=int, default=0)

parser.add_argument('--resize', type=str, default='0x0',
                    help='if provided, resize images before they are processed. default=0x0, Recommends : 432x368 or 656x368 or 1312x736 ')
parser.add_argument('--resize-out-ratio', type=float, default=4.0,
                    help='if provided, resize heatmaps before they are post-processed. default=1.0')

parser.add_argument('--model', type=str, default='mobilenet_thin', help='cmu / mobilenet_thin / mobilenet_v2_large / mobilenet_v2_small')
parser.add_argument('--show-process', type=bool, default=False,
                    help='for debug purpose, if enabled, speed for inference is dropped.')

parser.add_argument('--tensorrt', type=str, default="False",
                    help='for tensorrt process.')

parser.add_argument('--exercise', type=str, default='bicep',
                    help='choose the exercise')
                    
args = parser.parse_args()
logger.debug('initialization %s : %s' % (args.model, get_graph_path(args.model)))

class VideoThread(QThread):
    change_data_signal = pyqtSignal(dict)

    def run(self):
        w, h = model_wh(args.resize)
        if w > 0 and h > 0:
            e = TfPoseEstimator(get_graph_path(args.model), target_size=(w, h), trt_bool=str2bool(args.tensorrt))
        else:
            e = TfPoseEstimator(get_graph_path(args.model), target_size=(432, 368), trt_bool=str2bool(args.tensorrt))
        logger.debug('cam read+')
        cam = cv2.VideoCapture(args.camera)
        ret_val, image = cam.read()
        logger.info('cam image=%dx%d' % (image.shape[1], image.shape[0]))

        while True:
            ret_val, image = cam.read()
            logger.debug('image process+')
            humans = e.inference(image, resize_to_default=(w > 0 and h > 0), upsample_size=args.resize_out_ratio)

            logger.debug('postprocess+')
            image,joints = TfPoseEstimator.draw_humans(args.exercise,image, humans, imgcopy=False)
            # print(joints)
            self.change_data_signal.emit(joints)
            
            
            logger.debug('show+')
            cv2.imshow('tf-pose-estimation result', image)
            # fps_time = time.time()
            # cv2.putText(image,
            #             "FPS: %f" % (1.0 / (time.time() - fps_time)),
            #             (10, 10),  cv2.FONT_HERSHEY_SIMPLEX, 0.5,
            #             (0, 255, 0), 2)
            if cv2.waitKey(1) == 27:
                break
            # logger.debug('finished+')

            # cv2.destroyAllWindows()


class Ui_Form(object):
    def __init__(self):
        self.d={};self.d_v={}
        #dynamic update
        self.thread=VideoThread()
        self.thread.change_data_signal.connect(self.update_data)
        self.thread.start()

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(551, 431)
        self.gridLayoutWidget = QtWidgets.QWidget(Form)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(0, 0, 611, 431))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(self.gridLayoutWidget)
        self.frame.setStyleSheet("background-color: rgb(0,0,0);\n"
"font-size:15px;")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.exercise = QtWidgets.QLabel(self.frame)
        self.exercise.setGeometry(QtCore.QRect(-10, 0, 391, 61))
        self.exercise.setStyleSheet("color:white;\n"
"font-size:30px;\n"
"margin-left:10px;\n"
"padding:10px;\n"
"border:1px solid white;\n"
"border-color:rgb(0, 255, 226)")
        self.exercise.setObjectName("exercise")
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setGeometry(QtCore.QRect(30, 90, 321, 221))
        self.frame_2.setStyleSheet("border:1px solid white;\n"
"border:1px solid white;\n"
"border-color:rgb(0, 255, 226)")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.textEdit = QtWidgets.QTextEdit(self.frame)
        self.textEdit.setGeometry(QtCore.QRect(380, 0, 171, 331))
        self.textEdit.setStyleSheet("color:white;\n"
"border:1px solid white;\n"
"border-color:rgb(0, 255, 226)")
        self.textEdit.setObjectName("textEdit")
        self.textEdit_2 = QtWidgets.QTextEdit(self.frame)
        self.textEdit_2.setGeometry(QtCore.QRect(0, 336, 551, 91))
        self.textEdit_2.setStyleSheet("color:white;\n"
"border:1px solid white;\n"
"border-color:rgb(0, 255, 226)")
        self.textEdit_2.setObjectName("textEdit_2")
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)

        # #button to check
        # self.startbutton = QtWidgets.QPushButton(self.frame)
        # self.startbutton.setGeometry(QtCore.QRect(100, 336, 161, 151))
        # self.startbutton.setText("start")
        # self.startbutton.setObjectName("startbutton")
        
    
        #joints and value ui
        inc=0
        for i in range(0,3):
            #joints
            self.d["jointNumber"+str(i+1)] = QtWidgets.QLabel(self.frame_2)
            self.d["jointNumber"+str(i+1)].setGeometry(QtCore.QRect(30, 20+inc, 91, 41))
            self.d['jointNumber'+str(i+1)].setStyleSheet("color:rgb(255, 255, 255)")
            # self.d["jointNumber"+str(i+1)].setObjectName("jointNumber"+str(i+1))
            
            #value
            self.d_v["jointValue"+str(i+1)] = QtWidgets.QLabel(self.frame_2)
            self.d_v["jointValue"+str(i+1)].setGeometry(QtCore.QRect(160, 20+inc, 101, 41))
            self.d_v["jointValue"+str(i+1)].setStyleSheet("color:rgb(255,255,255)")
            # self.d_v["jointValue"+str(i+1)].setObjectName("Angle"+str(i+1))
            inc+=40

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.exercise.setText(_translate("Form", "Pulley push down"))
        self.textEdit.setHtml(_translate("Form", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:15px; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\"></span></p></body></html>"))
        self.textEdit_2.setHtml(_translate("Form", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:15px; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:15px;\"></span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        
        self.textEdit.setReadOnly(True)
        self.textEdit_2.setReadOnly(True)
        self.textEdit_2.setStyleSheet("margin-left:10px;padding:10px;")
        # self.startbutton.clicked.connect(self.call_pose_estimation)

    # @pyqtSlot(dict)
    def update_data(self,joints):
        print("getting called",joints)
        body=None
        #get exercise limits
        if(args.exercise == 'bicep'):
            body=Bicep()
        
        elif(args.exercise=="shoulder"):
            body=Shoulder()

        elif(args.exercise=="tricep"):
            body=Tricep()

        status=""
        amount=""
        count_correct=0;error=1
        
        #dynamically updating value of the angles
        for i, joint in enumerate(joints):
            print(joint)
            self.d["jointNumber"+str(i+1)].setText("Joint("+str(joint)+") :")
            self.d_v["jointValue"+str(i+1)].setText(str(round(joints[joint],2)))

            #maintaining status
            ang_start,ang_stop=body.get_limit(joint)
            print("angle",ang_start," ,",ang_stop)
            if(joints[joint] >= ang_start and joints[joint]<=ang_stop):
                count_correct+=1
            else:
                if(joints[joint]>ang_stop):
                    amount="expansion"
                elif(joints[joint]<ang_start):
                    amount="contraction"

                status+=f"{error}. Too much {amount} of Joint({joint})\n"
                error+=1

            if(count_correct==len(joints)):
                status="Perfect"
                self.textEdit_2.setStyleSheet("color: rgb(128, 255, 128)")
            else:
                self.textEdit_2.setStyleSheet("color:rgb(255, 26, 26)")
            
            self.textEdit_2.setText(status)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec())

    





    

